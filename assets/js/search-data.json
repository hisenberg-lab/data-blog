{
  
    
        "post0": {
            "title": "Covid-19 Data Visualisation with Altair",
            "content": "Data visualisation is a vital step in data analysis process since it gives a quick intuition about the data. It can reveal insights which cannot be easily conveyed by numbers. . I got to know about Altair package when I was searching the web on how to plot a choropleth map of India for my simple covid dashboard. The syntax was a bit different as I was only familiar with matplotlib and seaborn for visualization. . Need for Altair . The few well known visulaization packages in Python often have imperative APIs. This means the user has to focus more on the mechanics of visualization rather than the important relationships within data. . Imperative Declarative . - Specify How something should be done | - Specify What should be done | . - Must manually specify ploting steps | - Details determined automatically | . - Specification and Execution are intertwined | - Separates Specification from Execution | . . Altair feautres declarative API for exploratory visualization in Python allowing us to focus more on the data than incidental details. It is based on Vega and Vega-Lite visulaization grammars. . Visit the installation page for instructions to install the Altair package. . Important: Dont forget to import altair in you notebook after the installation. . import altair as alt # run this line if you are having trouble displaying charts #alt.renderers.enable(&#39;default&#39;) . Fundamentals . Data in Altair is built around Pandas Dataframe. I have already imported Pandas and cleaned my dataset for visualization. There are many example dataset in vega datasets package, you can try creating interactive charts on them. . In addition to Altair&#39;s documentaion there are good number of Altair tutorials, I recommend you go throuh them prior to this walkthrogh. . Tip: One of the best Altair tutorial I used to get started is Altair notebooks check out the link and launch binder to run the notebooks and experiment on them. . Fundamentals . Chart Object . The fundamental object in Altair is the Chart object which takes a dataframe as a single argument. By itself, a chart has no meaning, it is used in conjuction with data, marks, and encodings, which are the core pieces in an Altair chart. . alt.Chart(data) . Marks . mark attribute of the chart object is used to specify how we would like the data to be visualized. There are many available marks that can be used like point, circle, square, etc. . alt.Chart(data).mark_point() . Encodings . TO visually seperate the points, we can map various encoding channels, to columns in the dataset. There are many encoding channels such as x, y, color, shape, size, etc. The encode() method builds a key-value mapping between encoding channels to the columns in the dataset. . alt.Chart(data).mark_point().encode(x=&#39;a&#39;, y=&#39;b&#39;) . Layered Charts . Layered charts allow us to overlay two or more different charts on the same set of axes. They can be used to draw mutiple marks for the same data. . We can use + operator to create a layered chart, alternatively we could use the alt.layer function which accepts any number or charts. The order of layers is determined from the order in which they are specified. You can adjust the opacity of the layers to you liking if you dont want the upper layer to obscure the marks of lower layer. . layer1 + layer2 or alt.layer(layer1, layer2) . . Note: If you pretty much get a basic idea on these fundamentals you&#8217;re good to go and can create really cool interactive plots. . Covid-19 Plots . After learning to create an choropleth map in Altair, I actually decided to redo all my other plots for my dashboard in Altair :upside_down_face: Checkout the charts I ended up creating with the code from below, and if you are interested to see the complete dashboard you can launch this binder (be patient :turtle:). . Line Chart . latest_30_df.head() . Date Cases Count . 0 2021-04-02 | Confirmed | 89023 | . 1 2021-04-03 | Confirmed | 92994 | . 2 2021-04-04 | Confirmed | 103794 | . 3 2021-04-05 | Confirmed | 96563 | . 4 2021-04-06 | Confirmed | 115312 | . hover = alt.selection_single(on=&#39;mouseover&#39;) scale = alt.Scale(domain=[&#39;Confirmed&#39;, &#39;Recovered&#39;, &#39;Deceased&#39;], range=[&#39;red&#39;, &#39;green&#39;, &#39;purple&#39;]) line = alt.Chart(latest_30_df).mark_line(point=True, strokeWidth=3).encode( x=alt.X(&#39;Date:T&#39;, axis=alt.Axis(offset=3)), y=&#39;Count:Q&#39;,color=alt.Color(&#39;Cases:N&#39;,scale=scale), opacity=alt.condition(hover, alt.value(1.0), alt.value(0.5)) ).properties(width=550,height=250,selection=hover) text = alt.Chart(latest_30_df.query(&quot;Date == Date.max()&quot;)).mark_text( dx=-25,dy=-12, fontSize=25).encode(x=&#39;Date:T&#39;, y=&#39;Count:Q&#39;, text=&#39;Count:Q&#39;,color=alt.Color(&#39;Cases:N&#39;,scale=scale)) alt.layer(line,text,data = latest_30_df).configure_axis(grid=False).configure(background=&#39;black&#39;).interactive() . country_df.head() . Date Daily Confirmed Total Confirmed Daily Recovered Total Recovered Daily Deceased Total Deceased . 0 2020-01-30 | 1 | 1 | 0 | 0 | 0 | 0 | . 1 2020-01-31 | 0 | 1 | 0 | 0 | 0 | 0 | . 2 2020-02-01 | 0 | 1 | 0 | 0 | 0 | 0 | . 3 2020-02-02 | 1 | 2 | 0 | 0 | 0 | 0 | . 4 2020-02-03 | 1 | 3 | 0 | 0 | 0 | 0 | . hover = alt.selection_single(on=&#39;mouseover&#39;,nearest=True, fields=[&#39;Date&#39;]) line = alt.Chart(title=&quot;Confirmed Cases&quot;).mark_line().encode( x=alt.X(&#39;Date:T&#39;, axis=alt.Axis(offset=2)), y=&quot;Daily Confirmed&quot;,color=alt.value(&quot;red&quot;) ).properties(width=680, height=370).interactive() point = line.mark_point().encode(opacity=alt.value(0.0)).properties(selection=hover) text = alt.Chart().mark_text(align=&#39;right&#39;, dy=-2, fontSize=20).encode( x=&#39;Date:T&#39;, y=&quot;Daily Confirmed&quot;, text=&quot;Daily Confirmed&quot;, detail=&quot;Daily Confirmed&quot;, color=alt.value(&#39;white&#39;),opacity=alt.condition(hover,alt.value(0.8), alt.value(0.0))) alt.layer(line,point,text,data=country_df).interactive().configure(background=&#39;black&#39;).configure_axis(grid=False).configure_view( strokeWidth=0) . Normalized Stacked Area Chart . stack.head() . Date Cases Count . 0 2020-01-30 | Confirmed | 1 | . 1 2020-01-31 | Confirmed | 0 | . 2 2020-02-01 | Confirmed | 0 | . 3 2020-02-02 | Confirmed | 1 | . 4 2020-02-03 | Confirmed | 1 | . hover = alt.selection_single(on=&#39;mouseover&#39;) scale = alt.Scale(domain=[&#39;Confirmed&#39;, &#39;Recovered&#39;, &#39;Deceased&#39;], range=[&#39;#17c8cf&#39;, &#39;#20c730&#39;, &#39;red&#39;]) alt.Chart(stack).mark_area().encode( alt.X(&#39;Date:T&#39;), alt.Y(&#39;sum(Count):Q&#39;, stack=&#39;normalize&#39;), color=alt.Color(&#39;Cases:N&#39;,scale = scale), opacity=alt.condition(hover, alt.value(0.8), alt.value(0.4)) ).properties( width=800, height=400, selection=hover ).configure_legend( orient=&#39;bottom&#39; ).configure(background=&#39;black&#39;) . Choropleth map . latest_df = latest_df[[&#39;State&#39;,&#39;Confirmed&#39;,&#39;Recovered&#39;,&#39;Deaths&#39;,&#39;Active&#39;]] latest_df.set_index(&#39;State&#39;,inplace=True) latest_df.drop(&#39;Total&#39;, inplace=True) state_list = latest_df.index.tolist() idx = state_list.index(&#39;Jammu and Kashmir&#39;) state_list[idx] = &#39;Jammu &amp; Kashmir&#39; latest_df.index = state_list latest_df.reset_index(inplace=True) latest_df.rename({&#39;index&#39;:&#39;State&#39;},axis=1,inplace=True) latest_df[&#39;Recovery_rate&#39;] = latest_df[&#39;Recovered&#39;]/latest_df[&#39;Confirmed&#39;] latest_df[&#39;Death_rate&#39;] = latest_df[&#39;Deaths&#39;]/latest_df[&#39;Confirmed&#39;] . latest_df.head() . State Confirmed Recovered Deaths Active Recovery_rate Death_rate . 0 Maharashtra | 4665754 | 3930302 | 69615 | 663758 | 0.842372 | 0.014920 | . 1 Kerala | 1606820 | 1277294 | 5357 | 323827 | 0.794920 | 0.003334 | . 2 Karnataka | 1564132 | 1143250 | 15794 | 405068 | 0.730917 | 0.010098 | . 3 Andhra Pradesh | 1121102 | 982297 | 8053 | 130752 | 0.876189 | 0.007183 | . 4 Tamil Nadu | 1186344 | 1054746 | 14193 | 117405 | 0.889073 | 0.011964 | . I have used shapaefile of India map to create the outline and map the data, you can also use GeoJSON data file by convering it to a Geopandas dataframe in order to join on the covid data. Geopandas dataframes function exactly like standard Pandas dataframe, except they have additional functionality for geographic geometry like points and polygons. . import geopandas as gpd import json . gdf = gpd.read_file(&#39;Admin2.shp&#39;) gdf = gdf.merge(latest_df,left_on=&#39;ST_NM&#39;, right_on=&#39;State&#39;, how=&#39;left&#39;) . gdf.head() . ST_NM geometry State Confirmed Recovered Deaths Active Recovery_rate Death_rate . 0 Arunachal Pradesh | POLYGON ((96.08866 29.45997, 96.09428 29.45477... | Arunachal Pradesh | 18637.0 | 17190.0 | 59.0 | 1388.0 | 0.922359 | 0.003166 | . 1 Assam | POLYGON ((95.97166 27.96254, 95.97174 27.96227... | Assam | 256576.0 | 228872.0 | 1330.0 | 25027.0 | 0.892024 | 0.005184 | . 2 Chandigarh | POLYGON ((76.77175 30.79498, 76.77231 30.79420... | Chandigarh | 43446.0 | 35735.0 | 489.0 | 7222.0 | 0.822515 | 0.011255 | . 3 Karnataka | POLYGON ((77.32647 18.45884, 77.32648 18.45803... | Karnataka | 1564132.0 | 1143250.0 | 15794.0 | 405068.0 | 0.730917 | 0.010098 | . 4 Manipur | POLYGON ((94.57315 25.69156, 94.57522 25.69094... | Manipur | 31905.0 | 29843.0 | 410.0 | 1652.0 | 0.935371 | 0.012851 | . Now we convert Geopandas dataframe back to a GeoJSON as Altair requires a JSON to render the features on the map. . choro_json = json.loads(gdf.to_json()) choro_data = alt.Data(values = choro_json[&#39;features&#39;]) . Having all the data we need, we can create a gen_map function to add the two layers to our map: . Base | Choropeth | . In the tooltip attribute you might notice the data types are explicitly defined as quantitative &#39;:Q&quot; and nominal &quot;:N&quot;. This is necessary because we&#39;re passing a JSON and not a dataframe into Altair Chart, so the data types are not communicated to Altair. . def gen_map(geodata, color_column, title, tooltip, color_scheme ,scheme_title): base = alt.Chart(geodata, title = title).mark_geoshape(stroke=&#39;black&#39;,strokeWidth=1).encode().properties(width=685,height=800) choro = alt.Chart(geodata).mark_geoshape(stroke=&#39;white&#39;).encode(alt.Color(color_column, type=&#39;quantitative&#39;,scale=alt.Scale(scheme=color_scheme),title=scheme_title), tooltip=tooltip) return base+choro . gen_map(geodata=choro_data, color_column=&#39;properties.Active&#39;, title = &quot;Covid-19 cases&quot;, tooltip=[&#39;properties.ST_NM:N&#39;,&#39;properties.Active:Q&#39;], color_scheme=&#39;lighttealblue&#39;,scheme_title=&#39;Active cases&#39; ).configure(background=&#39;black&#39;) . . Area Chart . dose_df.head() . Updated On Dose value . 0 2021-01-16 | First Dose Administered | 48276.0 | . 1 2021-01-17 | First Dose Administered | 58604.0 | . 2 2021-01-18 | First Dose Administered | 99449.0 | . 3 2021-01-19 | First Dose Administered | 195525.0 | . 4 2021-01-20 | First Dose Administered | 251280.0 | . hover = alt.selection_single(on=&#39;mouseover&#39;) alt.Chart(dose_df).mark_area().encode( alt.X(&#39;Updated On:T&#39;), alt.Y(&#39;sum(value):Q&#39;, axis=alt.Axis(title=&#39;vaccine dose&#39;)), color=alt.Color(&#39;Dose:N&#39;,scale = alt.Scale(scheme=&#39;dark2&#39;)), opacity=alt.condition(hover, alt.value(1.0), alt.value(0.5)) ).properties( width=600, height=400, selection=hover ).configure(background=&#39;black&#39;).interactive() . Bart Chart . vaccine_type_df.head() . Vaccine Doses . 0 Covaxin | 4.120687e+08 | . 1 CoviShield | 4.197468e+09 | . alt.Chart(vaccine_type_df).mark_bar().encode( x=&#39;Doses:Q&#39;,y=&#39;Vaccine:N&#39;, color=alt.Color(&#39;Vaccine&#39;,scale=alt.Scale(scheme=&#39;set2&#39;)) ).properties(height=100,width=600).configure(background=&#39;black&#39;).interactive() . I hope this walkthrough has piqued your interest as well in Altair to experiment on many other features present in Altair. :wink: .",
            "url": "https://hisenberg-lab.github.io/data-blog/altair/visualization/2021/05/01/Post1.html",
            "relUrl": "/altair/visualization/2021/05/01/Post1.html",
            "date": " • May 1, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am a undergraduate student, with a graduation date of 2022. Currently on a self-directed learning journey, diving into Data science and ML. . You can find me @chandu-b-l on Linkedin. .",
          "url": "https://hisenberg-lab.github.io/data-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hisenberg-lab.github.io/data-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}